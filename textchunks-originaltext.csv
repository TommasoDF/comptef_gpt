Title,Text
Mathematics_in_R,"This text comes from the document Mathematics_in_R. 2 . My Big Fat Greek1 Calculator Functions , operators , and constants introduced in this Chapter : + , - , * , / , ^ , % * % , abs ( ) , as.matrix ( ) , choose ( ) , cos ( ) , cumprod ( ) , cumsum ( ) , det ( ) , diff ( ) , dim ( ) , eigen ( ) , exp ( ) , factorial ( ) , gamma ( ) , length ( ) , pi , prod ( ) , sin ( ) , solve ( ) , sort ( ) , sqrt ( ) , sum ( ) , t ( ) , tan ( ) . 2.1 Basic Math One of the simplest ( but very useful ) ways to use R is as a powerful number cruncher . By that I mean using R to perform standard mathematical calculations . The R language includes the usual arithmetic operations : + , - , * , / , ^ . Some examples : > 2+3 [ 1 ] 5 > 3/2 [ 1 ] 1.5 > 2^3 # this also can be written as 2 * * 3 [ 1 ] 8 > 4^2-3 * 2 # this is simply 16 - 6 [ 1 ] 10 > ( 56-14 ) /6 – 4 * 7 * 10/ ( 5^2-5 ) # this is more complicated [ 1 ] -7 Other standard functions that are found on most calculators are available in R : Name Operation sqrt ( ) square root abs ( ) absolute value sin ( ) , cos ( ) , tan ( ) trig functions ( radians ) – type ? Trig for others pi the number  = 3.1415926 .. exp ( ) , log ( ) exponential and logarithm gamma ( ) Euler ’ s gamma function factorial ( ) factorial function choose ( ) combination > sqrt ( 2 ) [ 1 ] 1.414214 > abs ( 2-4 ) [ 1 ] 2 > cos ( 4 * pi ) [ 1 ] 1 > log ( 0 ) # not defined [ 1 ] -Inf > factorial ( 6 ) # 6 ! [ 1 ] 720 > choose ( 52,5 ) # this is 52 ! / ( 47 ! * 5 ! ) [ 1 ] 2598960 1 Ahem . The Greek letters  and  are used to denote sums and products , respectively . Signomi . 9 2.2 Vector Arithmetic Vectors can be manipulated in a similar manner to scalars by using the same functions introduced in the last section . ( However , one must be careful when adding or subtracting vectors of different lengths or some unexpected results may occur . ) Some examples of such operations are : > x < - c ( 1,2,3,4 ) > y < - c ( 5,6,7,8 ) > x * y ["
Mathematics_in_R,"This text comes from the document Mathematics_in_R. are found on most calculators are available in R : Name Operation sqrt ( ) square root abs ( ) absolute value sin ( ) , cos ( ) , tan ( ) trig functions ( radians ) – type ? Trig for others pi the number  = 3.1415926 .. exp ( ) , log ( ) exponential and logarithm gamma ( ) Euler ’ s gamma function factorial ( ) factorial function choose ( ) combination > sqrt ( 2 ) [ 1 ] 1.414214 > abs ( 2-4 ) [ 1 ] 2 > cos ( 4 * pi ) [ 1 ] 1 > log ( 0 ) # not defined [ 1 ] -Inf > factorial ( 6 ) # 6 ! [ 1 ] 720 > choose ( 52,5 ) # this is 52 ! / ( 47 ! * 5 ! ) [ 1 ] 2598960 1 Ahem . The Greek letters  and  are used to denote sums and products , respectively . Signomi . 9 2.2 Vector Arithmetic Vectors can be manipulated in a similar manner to scalars by using the same functions introduced in the last section . ( However , one must be careful when adding or subtracting vectors of different lengths or some unexpected results may occur . ) Some examples of such operations are : > x < - c ( 1,2,3,4 ) > y < - c ( 5,6,7,8 ) > x * y [ 1 ] 5 12 21 32 > y/x [ 1 ] 5.000000 3.000000 2.333333 2.000000 > y-x [ 1 ] 4 4 4 4 > x^y [ 1 ] 1 64 2187 65536 > cos ( x * pi ) + cos ( y * pi ) [ 1 ] -2 2 -2 2 > Other useful functions that pertain to vectors include : Name Operation length ( ) returns the number of entries in a vector sum ( ) calculates the arithmetic sum of all values in the vector prod ( ) calculates the product of all values in the vector cumsum ( ) , cumprod ( ) cumulative sums and products sort ( ) sort a vector diff ( ) computes suitably lagged ( default is 1 ) differences Some examples using these functions : > s < - c ( 1,1,3,4,7,11 ) > length ( s ) [ 1 ] 6 > sum ( s ) # 1+1+3+4+7+11 [ 1 ] 27 > prod ( s ) # 1 * 1 * 3 * 4 * 7 * 11 [ 1 ] 924 > cumsum ( s ) [ 1 ] 1 2 5 9 16 27 > diff ( s ) # 1-1 , 3-1 , 4-3 , 7-4 , 11-7 [ 1 ] 0 2 1 3 4 > diff ( s , lag = 2 ) # 3-1 , 4-1 , 7-3 , 11-4 [ 1 ] 2 3 4 7 10 2.3 Matrix"
Mathematics_in_R,"This text comes from the document Mathematics_in_R. 1 ] 5 12 21 32 > y/x [ 1 ] 5.000000 3.000000 2.333333 2.000000 > y-x [ 1 ] 4 4 4 4 > x^y [ 1 ] 1 64 2187 65536 > cos ( x * pi ) + cos ( y * pi ) [ 1 ] -2 2 -2 2 > Other useful functions that pertain to vectors include : Name Operation length ( ) returns the number of entries in a vector sum ( ) calculates the arithmetic sum of all values in the vector prod ( ) calculates the product of all values in the vector cumsum ( ) , cumprod ( ) cumulative sums and products sort ( ) sort a vector diff ( ) computes suitably lagged ( default is 1 ) differences Some examples using these functions : > s < - c ( 1,1,3,4,7,11 ) > length ( s ) [ 1 ] 6 > sum ( s ) # 1+1+3+4+7+11 [ 1 ] 27 > prod ( s ) # 1 * 1 * 3 * 4 * 7 * 11 [ 1 ] 924 > cumsum ( s ) [ 1 ] 1 2 5 9 16 27 > diff ( s ) # 1-1 , 3-1 , 4-3 , 7-4 , 11-7 [ 1 ] 0 2 1 3 4 > diff ( s , lag = 2 ) # 3-1 , 4-1 , 7-3 , 11-4 [ 1 ] 2 3 4 7 10 2.3 Matrix Operations Among the many powerful features of R is its ability to perform matrix operations . As we > Matrix operations ( multiplication , transpose , etc . ) can easily be performed in R using a few simple functions like : Name Operation dim ( ) dimension of the matrix ( number of rows and columns ) as.matrix ( ) used to coerce an argument into a matrix object % * % matrix multiplication t ( ) matrix transpose det ( ) determinant of a square matrix solve ( ) matrix inverse ; also solves a system of linear equations eigen ( ) computes eigenvalues and eigenvectors Using the matrices A , B , and C just created , we can have some linear algebra fun using the above functions : 11 > t ( C ) # this is the same as A ! ! [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B % * % C [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ ,5 ] [ 1 , ] 13 16 19 22 25 [ 2 , ] 27 34 41 48 55 [ 3 , ] 41 52 63 74 85 [ 4 , ] 55 70 85 100 115 [ 5 , ] 69 88 107 126 145 >"
Mathematics_in_R,"This text comes from the document Mathematics_in_R. Operations Among the many powerful features of R is its ability to perform matrix operations . As we > Matrix operations ( multiplication , transpose , etc . ) can easily be performed in R using a few simple functions like : Name Operation dim ( ) dimension of the matrix ( number of rows and columns ) as.matrix ( ) used to coerce an argument into a matrix object % * % matrix multiplication t ( ) matrix transpose det ( ) determinant of a square matrix solve ( ) matrix inverse ; also solves a system of linear equations eigen ( ) computes eigenvalues and eigenvectors Using the matrices A , B , and C just created , we can have some linear algebra fun using the above functions : 11 > t ( C ) # this is the same as A ! ! [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B % * % C [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ ,5 ] [ 1 , ] 13 16 19 22 25 [ 2 , ] 27 34 41 48 55 [ 3 , ] 41 52 63 74 85 [ 4 , ] 55 70 85 100 115 [ 5 , ] 69 88 107 126 145 > D < - C % * % B > D [ ,1 ] [ ,2 ] [ 1 , ] 95 110 [ 2 , ] 220 260 > det ( D ) [ 1 ] 500 > solve ( D ) # this is D-1 [ ,1 ] [ ,2 ] [ 1 , ] 0.52 -0.22 [ 2 , ] -0.44 0.19 > 2.4 Exercises Use R to compute the following : 1 . 23 32 . 2. ee . 3 . ( 2.3 ) 8 + ln ( 7.5 ) – cos ( / 2 ) . 4 . Let A =           4 7 2 5 2 1 6 4 1 2 3 2 , B =               1 5 1 2 2 4 7 3 0 1 3 4 1 3 5 2 . Find AB-1 and BAT . 5 . The dot product of [ 2 , 5 , 6 , 7 ] and [ -1 , 3 , -1 , -1 ] ."
Mathematics_in_R,"This text comes from the document Mathematics_in_R. D < - C % * % B > D [ ,1 ] [ ,2 ] [ 1 , ] 95 110 [ 2 , ] 220 260 > det ( D ) [ 1 ] 500 > solve ( D ) # this is D-1 [ ,1 ] [ ,2 ] [ 1 , ] 0.52 -0.22 [ 2 , ] -0.44 0.19 > 2.4 Exercises Use R to compute the following : 1 . 23 32 . 2. ee . 3 . ( 2.3 ) 8 + ln ( 7.5 ) – cos ( / 2 ) . 4 . Let A =           4 7 2 5 2 1 6 4 1 2 3 2 , B =               1 5 1 2 2 4 7 3 0 1 3 4 1 3 5 2 . Find AB-1 and BAT . 5 . The dot product of [ 2 , 5 , 6 , 7 ] and [ -1 , 3 , -1 , -1 ] ."
R_Overwiev,"This text comes from the document R_Overwiev. 1 . Overview and History Functions and quantities introduced in this Chapter : apropos ( ) , c ( ) , FALSE or F , help ( ) , log ( ) , ls ( ) , matrix ( ) , q ( ) , rm ( ) , TRUE or T 1.1 What is R ? R is an integrated suite of software facilities for data manipulation , simulation , calculation and graphical display . It handles and analyzes data very effectively and it contains a suite of operators for calculations on arrays and matrices . In addition , it has the graphical capabilities for very sophisticated graphs and data displays . Finally , it is an elegant , object-oriented programming language . R is an independent , open-source , and free implementation of the S programming language . Today , the commercial product is called S-PLUS and it is distributed by the Insightful Corporation . The S language , which was written in the mid-1970s , was a product of Bell Labs ( of AT & T and now Lucent Technologies ) and was originally a program for the Unix operating system . R is available in Windows and Macintosh versions , as well as in various flavors of Unix and Linux . Although there are some minor differences between R and SPLUS ( mostly in the graphical user interface ) , they are essentially identical . The R project was started by Robert Gentleman and Ross Ihaka ( that ’ s where the name “ R ” is derived ) from the Statistics Department in the University of Auckland in 1995 . The software has quickly gained a widespread audience . It is currently maintained by the R Core development team – a hard-working , international group of volunteer developers . The R project web page is http : //www.r-project.org This is the main site for information on R. Here , you can find information on obtaining the software , get documentation , read FAQs , etc . For downloading the software directly , you can visit the Comprehensive R Archive Network ( CRAN ) in the U.S. at http : //cran.us.r-project.org/ New versions of the software are released periodically . 1.2 Starting and Quitting R The easiest way to use R is in an interactive manner via the command line . After the software is installed on a Windows or Macintosh machine , you simply double click the R icon ( in Unix/Linux , type R from the command prompt ) . When R is started , the program ’ s “ Gui ” ( graphical user interface ) window appears . Under the opening message in the R Console is the > ( “ greater than ” ) prompt . For the most part , statements in R are typed directly into the R Console window . 2 Once R has started , you should be greeted with a command line similar to R version"
R_Overwiev,"This text comes from the document R_Overwiev. ( that ’ s where the name “ R ” is derived ) from the Statistics Department in the University of Auckland in 1995 . The software has quickly gained a widespread audience . It is currently maintained by the R Core development team – a hard-working , international group of volunteer developers . The R project web page is http : //www.r-project.org This is the main site for information on R. Here , you can find information on obtaining the software , get documentation , read FAQs , etc . For downloading the software directly , you can visit the Comprehensive R Archive Network ( CRAN ) in the U.S. at http : //cran.us.r-project.org/ New versions of the software are released periodically . 1.2 Starting and Quitting R The easiest way to use R is in an interactive manner via the command line . After the software is installed on a Windows or Macintosh machine , you simply double click the R icon ( in Unix/Linux , type R from the command prompt ) . When R is started , the program ’ s “ Gui ” ( graphical user interface ) window appears . Under the opening message in the R Console is the > ( “ greater than ” ) prompt . For the most part , statements in R are typed directly into the R Console window . 2 Once R has started , you should be greeted with a command line similar to R version 2.9.1 ( 2009-06-26 ) Copyright ( C ) 2009 The R Foundation for Statistical Computing ISBN 3-900051-07-0 R is free software and comes with ABSOLUTELY NO WARRANTY . You are welcome to redistribute it under certain conditions . Type 'license ( ) ' or 'licence ( ) ' for distribution details . Natural language support but running in an English locale R is a collaborative project with many contributors . Type 'contributors ( ) ' for more information and 'citation ( ) ' on how to cite R or R packages in publications . Type 'demo ( ) ' for some demos , 'help ( ) ' for on-line help , or 'help.start ( ) ' for an HTML browser interface to help . Type ' q ( ) ' to quit R. > At the > prompt , you tell R what you want it to do . You give R a command and R does the work and gives the answer . If your command is too long to fit on a line or if you submit an incomplete command , a “ + ” is used for the continuation prompt . To quit R , type q ( ) or use the Exit option in the File menu . 1.3 A Simple Example : the c ( ) Function and the Assignment Operator A useful command in R for entering small data sets is the c ( ) function . This function combines terms together . For"
R_Overwiev,"This text comes from the document R_Overwiev. 2.9.1 ( 2009-06-26 ) Copyright ( C ) 2009 The R Foundation for Statistical Computing ISBN 3-900051-07-0 R is free software and comes with ABSOLUTELY NO WARRANTY . You are welcome to redistribute it under certain conditions . Type 'license ( ) ' or 'licence ( ) ' for distribution details . Natural language support but running in an English locale R is a collaborative project with many contributors . Type 'contributors ( ) ' for more information and 'citation ( ) ' on how to cite R or R packages in publications . Type 'demo ( ) ' for some demos , 'help ( ) ' for on-line help , or 'help.start ( ) ' for an HTML browser interface to help . Type ' q ( ) ' to quit R. > At the > prompt , you tell R what you want it to do . You give R a command and R does the work and gives the answer . If your command is too long to fit on a line or if you submit an incomplete command , a “ + ” is used for the continuation prompt . To quit R , type q ( ) or use the Exit option in the File menu . 1.3 A Simple Example : the c ( ) Function and the Assignment Operator A useful command in R for entering small data sets is the c ( ) function . This function combines terms together . For example , suppose the following represents eight tosses of a fair die : 2 5 1 6 5 5 4 1 To enter this into an R session , we type > dieroll < - c ( 2,5,1,6,5,5,4,1 ) > dieroll [ 1 ] 2 5 1 6 5 5 4 1 > Notice a few things :  We assigned the values to a variable called dieroll . R is case sensitive , so you could have another variable called DiEroLL and it would be distinct . The name of a variable can contain most combination of letters , numbers , and periods ( . ) . ( Obviously , a variable can ’ t be named with all numbers , though . ) 3  The assignment operator is “ < - ” ; to be specific , this is composed of a < ( “ less than ” ) and a – ( “ minus ” or “ dash ” ) typed together . It is usually read as “ gets ” – the variable dieroll gets the value c ( 2,5,1,6,5,5,4,1 ) . Alternatively , as of R version 1.4.0 , you can use “ = ” as the assignment operator .  The value of dieroll doesn ’ t automatically print out . But , it does when we type just the name on the input line as seen above .  The value of dieroll is prefaced with a [ 1 ] . This"
R_Overwiev,"This text comes from the document R_Overwiev. example , suppose the following represents eight tosses of a fair die : 2 5 1 6 5 5 4 1 To enter this into an R session , we type > dieroll < - c ( 2,5,1,6,5,5,4,1 ) > dieroll [ 1 ] 2 5 1 6 5 5 4 1 > Notice a few things :  We assigned the values to a variable called dieroll . R is case sensitive , so you could have another variable called DiEroLL and it would be distinct . The name of a variable can contain most combination of letters , numbers , and periods ( . ) . ( Obviously , a variable can ’ t be named with all numbers , though . ) 3  The assignment operator is “ < - ” ; to be specific , this is composed of a < ( “ less than ” ) and a – ( “ minus ” or “ dash ” ) typed together . It is usually read as “ gets ” – the variable dieroll gets the value c ( 2,5,1,6,5,5,4,1 ) . Alternatively , as of R version 1.4.0 , you can use “ = ” as the assignment operator .  The value of dieroll doesn ’ t automatically print out . But , it does when we type just the name on the input line as seen above .  The value of dieroll is prefaced with a [ 1 ] . This indicates that the value is a vector ( more on this later ) . When entering commands in R , you can save yourself a lot of typing when you learn to use the arrow keys effectively . Each command you submit is stored in the History and the up arrow (  ) will navigate backwards along this history and the down arrow (  ) forwards . The left (  ) and right arrow (  ) keys move backwards and forwards along the command line . These keys combined with the mouse for cutting/pasting can make it very easy to edit and execute previous commands . 1.4 The Workspace All variables or “ objects ” created in R are stored in what ’ s called the workspace . To see what variables are in the workspace , you can use the function ls ( ) to list them ( this function doesn ’ t need any argument between the parentheses ) . Currently , we only have : > ls ( ) [ 1 ] `` dieroll '' If we define a new variable – a simple function of the variable dieroll – it will be added to the workspace : > newdieroll < - dieroll/2 # divide every element by two > newdieroll [ 1 ] 1.0 2.5 0.5 3.0 2.5 2.5 2.0 0.5 > ls ( ) [ 1 ] `` dieroll '' `` newdieroll '' Notice a few more things :  The"
R_Overwiev,"This text comes from the document R_Overwiev. indicates that the value is a vector ( more on this later ) . When entering commands in R , you can save yourself a lot of typing when you learn to use the arrow keys effectively . Each command you submit is stored in the History and the up arrow (  ) will navigate backwards along this history and the down arrow (  ) forwards . The left (  ) and right arrow (  ) keys move backwards and forwards along the command line . These keys combined with the mouse for cutting/pasting can make it very easy to edit and execute previous commands . 1.4 The Workspace All variables or “ objects ” created in R are stored in what ’ s called the workspace . To see what variables are in the workspace , you can use the function ls ( ) to list them ( this function doesn ’ t need any argument between the parentheses ) . Currently , we only have : > ls ( ) [ 1 ] `` dieroll '' If we define a new variable – a simple function of the variable dieroll – it will be added to the workspace : > newdieroll < - dieroll/2 # divide every element by two > newdieroll [ 1 ] 1.0 2.5 0.5 3.0 2.5 2.5 2.0 0.5 > ls ( ) [ 1 ] `` dieroll '' `` newdieroll '' Notice a few more things :  The new variable newdieroll has been assigned the value of dieroll divided by 2 – more about algebraic expressions is given in the next session .  You can add a comment to a command line by beginning it with the # character . R ignores everything on an input line after a # . To remove objects from the workspace ( you ’ ll want to do this occasionally when your workspace gets too cluttered ) , use the rm ( ) function : > rm ( newdieroll ) # this was a silly variable anyway > ls ( ) [ 1 ] `` dieroll '' 4 In Windows , you can clear the entire workspace via the “ Remove all objects ” option under the “ Misc ” menu . However , this is dangerous – more likely than not you will want to keep some things and delete others . When exiting R , the software asks if you would like to save your workspace image . If you click yes , all objects ( both new ones created in the current session and others from earlier sessions ) will be available during your next session . If you click no , all new objects will be lost and the workspace will be restored to the last time the image was saved . Get in the habit of saving your work – it will probably help you in the future . 1.5 Getting Help There is text help"
R_Overwiev,"This text comes from the document R_Overwiev. new variable newdieroll has been assigned the value of dieroll divided by 2 – more about algebraic expressions is given in the next session .  You can add a comment to a command line by beginning it with the # character . R ignores everything on an input line after a # . To remove objects from the workspace ( you ’ ll want to do this occasionally when your workspace gets too cluttered ) , use the rm ( ) function : > rm ( newdieroll ) # this was a silly variable anyway > ls ( ) [ 1 ] `` dieroll '' 4 In Windows , you can clear the entire workspace via the “ Remove all objects ” option under the “ Misc ” menu . However , this is dangerous – more likely than not you will want to keep some things and delete others . When exiting R , the software asks if you would like to save your workspace image . If you click yes , all objects ( both new ones created in the current session and others from earlier sessions ) will be available during your next session . If you click no , all new objects will be lost and the workspace will be restored to the last time the image was saved . Get in the habit of saving your work – it will probably help you in the future . 1.5 Getting Help There is text help available from within R using the function help ( ) or the ? character typed before a command . If you have questions about any function in this manual , see the corresponding help file . For example , suppose you would like to learn more about the function log ( ) in R. The following two commands result in the same thing : > help ( log ) > ? log In a Windows or Macintosh system , a Help Window opens with the following : log package : base R Documentation Logarithms and Exponentials Description : ` log ' computes natural logarithms , ` log10 ' computes common ( i.e. , base 10 ) logarithms , and ` log2 ' computes binary ( i.e. , base 2 ) logarithms . The general form ` logb ( x , base ) ' computes logarithms with base ` base ' ( ` log10 ' and ` log2 ' are only special cases ) . . . . ( skipped material ) Usage : log ( x , base = exp ( 1 ) ) logb ( x , base = exp ( 1 ) ) log10 ( x ) log2 ( x ) . . . Arguments : x : a numeric or complex vector . base : positive number . The base with respect to which logarithms are computed . Defaults to e= ` exp ( 1 ) ' . Value : A vector of the same length as"
R_Overwiev,"This text comes from the document R_Overwiev. available from within R using the function help ( ) or the ? character typed before a command . If you have questions about any function in this manual , see the corresponding help file . For example , suppose you would like to learn more about the function log ( ) in R. The following two commands result in the same thing : > help ( log ) > ? log In a Windows or Macintosh system , a Help Window opens with the following : log package : base R Documentation Logarithms and Exponentials Description : ` log ' computes natural logarithms , ` log10 ' computes common ( i.e. , base 10 ) logarithms , and ` log2 ' computes binary ( i.e. , base 2 ) logarithms . The general form ` logb ( x , base ) ' computes logarithms with base ` base ' ( ` log10 ' and ` log2 ' are only special cases ) . . . . ( skipped material ) Usage : log ( x , base = exp ( 1 ) ) logb ( x , base = exp ( 1 ) ) log10 ( x ) log2 ( x ) . . . Arguments : x : a numeric or complex vector . base : positive number . The base with respect to which logarithms are computed . Defaults to e= ` exp ( 1 ) ' . Value : A vector of the same length as ` x ' containing the transformed values . ` log ( 0 ) ' gives ` -Inf ' ( when available ) . . . . 5 So , we see that the log ( ) function in R is the logarithm function from mathematics . This function takes two arguments : “ x ” is the variable or object that will be taken the logarithm of and “ base ” defines which logarithm is calculated . Note that base is defaulted to e = 2.718281828 .. , which is the natural logarithm . We also see that there are other associated functions , namely log10 ( ) and log2 ( ) for the calculation of base 10 and 2 ( respectively ) logarithms . Some examples : > log ( 100 ) [ 1 ] 4.60517 > log2 ( 16 ) # same as log ( 16 , base=2 ) or just log ( 16,2 ) [ 1 ] 4 > log ( 1000 , base=10 ) # same as log10 ( 1000 ) [ 1 ] 3 > Due to the object oriented nature of R , we can also use the log ( ) function to calculate the logarithm of numerical vectors and matrices : > log2 ( c ( 1,2,3,4 ) ) # log base 2 of the vector ( 1,2,3,4 ) [ 1 ] 0.000000 1.000000 1.584963 2.000000 > Help can also be accessed from the menu on the R Console . This includes both"
R_Overwiev,"This text comes from the document R_Overwiev. ` x ' containing the transformed values . ` log ( 0 ) ' gives ` -Inf ' ( when available ) . . . . 5 So , we see that the log ( ) function in R is the logarithm function from mathematics . This function takes two arguments : “ x ” is the variable or object that will be taken the logarithm of and “ base ” defines which logarithm is calculated . Note that base is defaulted to e = 2.718281828 .. , which is the natural logarithm . We also see that there are other associated functions , namely log10 ( ) and log2 ( ) for the calculation of base 10 and 2 ( respectively ) logarithms . Some examples : > log ( 100 ) [ 1 ] 4.60517 > log2 ( 16 ) # same as log ( 16 , base=2 ) or just log ( 16,2 ) [ 1 ] 4 > log ( 1000 , base=10 ) # same as log10 ( 1000 ) [ 1 ] 3 > Due to the object oriented nature of R , we can also use the log ( ) function to calculate the logarithm of numerical vectors and matrices : > log2 ( c ( 1,2,3,4 ) ) # log base 2 of the vector ( 1,2,3,4 ) [ 1 ] 0.000000 1.000000 1.584963 2.000000 > Help can also be accessed from the menu on the R Console . This includes both the text help and help that you can access via a web browser . You can also perform a keyword search with the function apropos ( ) . As an example , to find all functions in R that contain the string norm , type : > apropos ( `` norm '' ) [ 1 ] `` dlnorm '' `` dnorm '' `` plnorm '' `` pnorm '' `` qlnorm '' [ 6 ] `` qnorm '' `` qqnorm '' `` qqnorm.default '' `` rlnorm '' `` rnorm '' > Note that we put the keyword in double quotes , but single quotes ( `` ) will also work . 1.6 More on Functions in R We have already seen a few functions at this point , but R has an incredible number of functions that are built into the software , and you even have the ability to write your own ( see Chapter 8 ) . Most functions will return something , and functions usually require one or more input values . In order to understand how to generally use functions in R , let ’ s consider the function matrix ( ) . A call to the help file gives the following : Matrices Description : 'matrix ' creates a matrix from the given set of values . Usage : matrix ( data = NA , nrow = 1 , ncol = 1 , byrow = FALSE ) 6 Arguments : data : the data vector nrow"
R_Overwiev,"This text comes from the document R_Overwiev. the text help and help that you can access via a web browser . You can also perform a keyword search with the function apropos ( ) . As an example , to find all functions in R that contain the string norm , type : > apropos ( `` norm '' ) [ 1 ] `` dlnorm '' `` dnorm '' `` plnorm '' `` pnorm '' `` qlnorm '' [ 6 ] `` qnorm '' `` qqnorm '' `` qqnorm.default '' `` rlnorm '' `` rnorm '' > Note that we put the keyword in double quotes , but single quotes ( `` ) will also work . 1.6 More on Functions in R We have already seen a few functions at this point , but R has an incredible number of functions that are built into the software , and you even have the ability to write your own ( see Chapter 8 ) . Most functions will return something , and functions usually require one or more input values . In order to understand how to generally use functions in R , let ’ s consider the function matrix ( ) . A call to the help file gives the following : Matrices Description : 'matrix ' creates a matrix from the given set of values . Usage : matrix ( data = NA , nrow = 1 , ncol = 1 , byrow = FALSE ) 6 Arguments : data : the data vector nrow : the desired number of rows ncol : the desired number of columns byrow : logical . If ` FALSE ' the matrix is filled by columns , otherwise the matrix is filled by rows . ... So , we see that this is a function that takes vectors and turns them into matrix objects . There are 4 arguments for this function , and they specify the entries and the size of the matrix object to be created . The argument byrow is set to be either TRUE or FALSE ( or T or F – either are allowed for logicals ) to specify how the values are filled in the matrix . Often arguments for functions will have default values , and we see that all of the arguments in the matrix ( ) function do . So , the call > matrix ( ) will return a matrix that has one row , one column , with the single entry NA ( missing or “ not available ” ) . However , the following is more interesting : > a < - c ( 1,2,3,4,5,6,7,8 ) > A < - matrix ( a , nrow=2 , ncol=4 , byrow=FALSE ) # a is different from A > A [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ 1 , ] 1 3 5 7 [ 2 , ] 2 4 6 8 > Note that we could have left off the byrow=FALSE argument"
R_Overwiev,"This text comes from the document R_Overwiev. : the desired number of rows ncol : the desired number of columns byrow : logical . If ` FALSE ' the matrix is filled by columns , otherwise the matrix is filled by rows . ... So , we see that this is a function that takes vectors and turns them into matrix objects . There are 4 arguments for this function , and they specify the entries and the size of the matrix object to be created . The argument byrow is set to be either TRUE or FALSE ( or T or F – either are allowed for logicals ) to specify how the values are filled in the matrix . Often arguments for functions will have default values , and we see that all of the arguments in the matrix ( ) function do . So , the call > matrix ( ) will return a matrix that has one row , one column , with the single entry NA ( missing or “ not available ” ) . However , the following is more interesting : > a < - c ( 1,2,3,4,5,6,7,8 ) > A < - matrix ( a , nrow=2 , ncol=4 , byrow=FALSE ) # a is different from A > A [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ 1 , ] 1 3 5 7 [ 2 , ] 2 4 6 8 > Note that we could have left off the byrow=FALSE argument , since this is the default value . In addition , since there is a specified ordering to the arguments in the function , we also could have typed > A < - matrix ( a,2,4 ) to get the same result . For the most part , however , it is best to include the argument names in a function call ( especially when you aren ’ t using the default values ) so that you don ’ t confuse yourself . We will learn more about this function in the next chapter . 1.7 Printing and Saving Your Work You can print directly from the R Console by selecting “ Print… ” in the File menu , but this will capture everything ( including errors ) from your session . Alternatively , you can copy what you need and paste it into a word processor or text editor ( suggestion : use Courier font so that the formatting is identical to the R Console ) . In addition , you can save everything in the R Console by using the “ Save to File… ” command . 7 1.8 Other Sources of Reference It would be impossible to describe all of R in a document of manageable size . But , there are a number of tutorials , manuals , and books that can help with learning to use R. Happily , like the program itself , much of what you can find is free . Here are"
R_Overwiev,"This text comes from the document R_Overwiev. , since this is the default value . In addition , since there is a specified ordering to the arguments in the function , we also could have typed > A < - matrix ( a,2,4 ) to get the same result . For the most part , however , it is best to include the argument names in a function call ( especially when you aren ’ t using the default values ) so that you don ’ t confuse yourself . We will learn more about this function in the next chapter . 1.7 Printing and Saving Your Work You can print directly from the R Console by selecting “ Print… ” in the File menu , but this will capture everything ( including errors ) from your session . Alternatively , you can copy what you need and paste it into a word processor or text editor ( suggestion : use Courier font so that the formatting is identical to the R Console ) . In addition , you can save everything in the R Console by using the “ Save to File… ” command . 7 1.8 Other Sources of Reference It would be impossible to describe all of R in a document of manageable size . But , there are a number of tutorials , manuals , and books that can help with learning to use R. Happily , like the program itself , much of what you can find is free . Here are some examples of documentation that are available :  The R program : From the Help menu you can access the manuals that come with the software . These are written by the R core development team . Some are very lengthy and specific , but the manual “ An Introduction to R ” is a good source of useful information .  Free Documentation : The CRAN website has several user contributed documents in several languages . These include : R for Beginners by Emmanuel Paradis ( 76 pages ) . A good overview of the software with some nice descriptions of the graphical capabilities of R. The author assumes that the reader knows some statistical methods . R reference card by Tom Short ( 4 pages ) . This is a great desk companion when working with R.  Books : These you have to buy , but they are excellent ! Some examples : Introductory Statistics with R by Peter Dalgaard , Springer-Verlag ( 2002 ) . Peter is a member of the R Core team and this book is a fantastic reference that includes both elementary and some advanced statistical methods in R. Modern Applied Statistics with S , 4th Ed . by W.N . Venable and B.D . Ripley , Springer-Verlag ( 2002 ) . The authoritative guide to the S programming language for advanced statistical methods . 1.9 Exercises 1 . Use the help system to find information on the R functions mean and"
R_Overwiev,"This text comes from the document R_Overwiev. some examples of documentation that are available :  The R program : From the Help menu you can access the manuals that come with the software . These are written by the R core development team . Some are very lengthy and specific , but the manual “ An Introduction to R ” is a good source of useful information .  Free Documentation : The CRAN website has several user contributed documents in several languages . These include : R for Beginners by Emmanuel Paradis ( 76 pages ) . A good overview of the software with some nice descriptions of the graphical capabilities of R. The author assumes that the reader knows some statistical methods . R reference card by Tom Short ( 4 pages ) . This is a great desk companion when working with R.  Books : These you have to buy , but they are excellent ! Some examples : Introductory Statistics with R by Peter Dalgaard , Springer-Verlag ( 2002 ) . Peter is a member of the R Core team and this book is a fantastic reference that includes both elementary and some advanced statistical methods in R. Modern Applied Statistics with S , 4th Ed . by W.N . Venable and B.D . Ripley , Springer-Verlag ( 2002 ) . The authoritative guide to the S programming language for advanced statistical methods . 1.9 Exercises 1 . Use the help system to find information on the R functions mean and median . 2 . Get a list of all the functions in R that contains the string test . 3 . Create the vector info that contains your age , height ( in inches/cm ) , and phone number . 4 . Create the matrix Ident defined as a 3x3 identity matrix . 5 . Save your work from this session in the file 1stR.txt . 8 have seen in the last chapter , you can create matrix objects from vectors of numbers using the matrix ( ) command : > a < - c ( 1,2,3,4,5,6,7,8,9,10 ) > A < - matrix ( a , nrow = 5 , ncol = 2 ) # fill in by column > A [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B < - matrix ( a , nrow = 5 , ncol = 2 , byrow = TRUE ) # fill in by row > B [ ,1 ] [ ,2 ] [ 1 , ] 1 2 [ 2 , ] 3 4 [ 3 , ] 5 6 [ 4 , ] 7 8 [ 5 , ] 9 10 > C < - matrix ( a , nrow = 2 , ncol = 5 , byrow = TRUE ) > C [ ,1 ] [ ,2 ] [ ,3"
R_Overwiev,"This text comes from the document R_Overwiev. median . 2 . Get a list of all the functions in R that contains the string test . 3 . Create the vector info that contains your age , height ( in inches/cm ) , and phone number . 4 . Create the matrix Ident defined as a 3x3 identity matrix . 5 . Save your work from this session in the file 1stR.txt . 8 have seen in the last chapter , you can create matrix objects from vectors of numbers using the matrix ( ) command : > a < - c ( 1,2,3,4,5,6,7,8,9,10 ) > A < - matrix ( a , nrow = 5 , ncol = 2 ) # fill in by column > A [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B < - matrix ( a , nrow = 5 , ncol = 2 , byrow = TRUE ) # fill in by row > B [ ,1 ] [ ,2 ] [ 1 , ] 1 2 [ 2 , ] 3 4 [ 3 , ] 5 6 [ 4 , ] 7 8 [ 5 , ] 9 10 > C < - matrix ( a , nrow = 2 , ncol = 5 , byrow = TRUE ) > C [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ ,5 ] [ 1 , ] 1 2 3 4 5 [ 2 , ] 6 7 8 9 10"
R_Overwiev,"This text comes from the document R_Overwiev. ] [ ,4 ] [ ,5 ] [ 1 , ] 1 2 3 4 5 [ 2 , ] 6 7 8 9 10"
recap_problems,"This text comes from the document recap_problems. \\documentclass { article } \\usepackage { graphicx } \\usepackage { enumitem } \\usepackage { xcolor } \\usepackage { amsmath } \\usepackage { subcaption } \\begin { document } \\author { Tommaso Di Francesco \\\\ tommaso.difrancesco @ unive.it } \\title { \\textbf { Optimization - EM2Q12\\\\Exercise Session 8 } } \\maketitle \\begin { center } \\includegraphics [ width = 33mm ] { logo.jpeg } \\\\ [ 8ex ] \\caption { Department of Economics , \\\\Ca'Foscari University of Venice } \\end { center } \\medskip \\section * { RECAP EXERCISES } \\section * { Exercise 1 \\textcolor { red } { [ Unconstrained Optimization ] } } Solve \\ [ \\max_ { u_t { \\in\\mathbb { R } } } { \\sum_ { t=0 } ^3 1+x_t-u_t^2 } \\ ] s.t . \\ [ x_ { t+1 } =x_t+u_t \\quad \\text { for } \\quad t=0,1,2\\ ] \\ [ u_3 = 0 \\ ] \\ [ { x_0 } { =0 } \\ ] by rewriting the problem as a Static Optimization problem . \\subsection * { Solution } \\color { blue } We can rewrite the problem by exploiting the dynamic constraint to get a value for $ u_t = x_ { t+1 } -x_ { t } $ . Then we expand the summation , use the substitution , and use $ x_0 = 0 $ , to get : \\ [ \\max_ { x_1 , x_2 , x_3 } \\left ( 4 + x_1 +x_2 +x_3 - 2x^2_1 -2x^2_2 - x^2_3 + 2x_1x_2 + 2x_2x_3\\right ) . \\ ] This is an unconstrained optimization problem in three variables . Candidate solutions must satisfy the FOC $ \\nabla f ( x_1 , x_2 , x_3 ) =\\mathbf { 0 } $ . Computing the gradient we get : \\ [ \\nabla f ( x_1 , x_2 , x_3 ) '=\\left [ \\begin { array } { c } 1 - 4x_1 + 2x_2 \\\\ 1 - 4x_2 + 2x_3 + 2x_1 \\\\ 1 - 2x_3 + 2x_2 \\end { array } \\right ] , \\ ] setting it equal to 0 we get the only stationary point to be : \\ [ ( x^ * _1 , x^ * _2 , x^ * _3 ) = ( 3/2 , 5/2 , 3 ) . \\ ] To prove that this point is our maximizer we look at second order conditions . The Hessian matrix is given by : \\ [ H ( x_1 , x_2 , x_3 ) =\\left [ \\begin { array } { ccc } { -4 } & 2 & 0 \\\\ { 2 } & { -4 } & 2 \\\\ 0 & 2 & -2\\end { array } \\right ] , \\ ] with principal leading minors being : $ A_1 = -4 $ , $ A_2 = 12 $ , $ A_3 = -8 $ . The matrix is therefore negative definite , the function is globally concave , and the candidate point is"
recap_problems,"This text comes from the document recap_problems. - x^2_3 + 2x_1x_2 + 2x_2x_3\\right ) . \\ ] This is an unconstrained optimization problem in three variables . Candidate solutions must satisfy the FOC $ \\nabla f ( x_1 , x_2 , x_3 ) =\\mathbf { 0 } $ . Computing the gradient we get : \\ [ \\nabla f ( x_1 , x_2 , x_3 ) '=\\left [ \\begin { array } { c } 1 - 4x_1 + 2x_2 \\\\ 1 - 4x_2 + 2x_3 + 2x_1 \\\\ 1 - 2x_3 + 2x_2 \\end { array } \\right ] , \\ ] setting it equal to 0 we get the only stationary point to be : \\ [ ( x^ * _1 , x^ * _2 , x^ * _3 ) = ( 3/2 , 5/2 , 3 ) . \\ ] To prove that this point is our maximizer we look at second order conditions . The Hessian matrix is given by : \\ [ H ( x_1 , x_2 , x_3 ) =\\left [ \\begin { array } { ccc } { -4 } & 2 & 0 \\\\ { 2 } & { -4 } & 2 \\\\ 0 & 2 & -2\\end { array } \\right ] , \\ ] with principal leading minors being : $ A_1 = -4 $ , $ A_2 = 12 $ , $ A_3 = -8 $ . The matrix is therefore negative definite , the function is globally concave , and the candidate point is indeed our global maximizer . \\color { black } \\section * { Exercise 2 \\textcolor { red } { [ Equality Constrained Optimization ] } } Given the problem \\ [ \\max_ { x , y , z } x + y + z\\ ] s.t . \\ [ x y z = 1\\ ] \\begin { enumerate } [ label = ( \\alph * ) ] \\item Find the stationary points of the problem . \\item Argue if any of the candidate points is the global miximizer . \\end { enumerate } \\subsection * { Solution } \\color { blue } \\begin { enumerate } [ label = ( \\alph * ) ] \\item We write the Lagrangean function as : \\ [ \\mathcal { L } ( x , y , z \\lambda ) = x+y+z+\\lambda\\left ( 1 - x y z \\right ) .\\ ] First order conditions imply : \\ [ \\left\\ { \\begin { array } { l } { 1- \\lambda y z=0 } \\\\ { 1- \\lambda x z=0 } \\\\ { 1- \\lambda x y=0 } \\\\ { 1- x y z =0 } \\end { array } \\right . \\ ] The only solution of the system is given by : \\ [ ( x^ * , y^ * , z^ * ) = ( 1 , 1 , 1 ) \\quad \\text { with } \\quad \\lambda^ * = 1 . \\ ] \\item We can prove that the point"
recap_problems,"This text comes from the document recap_problems. indeed our global maximizer . \\color { black } \\section * { Exercise 2 \\textcolor { red } { [ Equality Constrained Optimization ] } } Given the problem \\ [ \\max_ { x , y , z } x + y + z\\ ] s.t . \\ [ x y z = 1\\ ] \\begin { enumerate } [ label = ( \\alph * ) ] \\item Find the stationary points of the problem . \\item Argue if any of the candidate points is the global miximizer . \\end { enumerate } \\subsection * { Solution } \\color { blue } \\begin { enumerate } [ label = ( \\alph * ) ] \\item We write the Lagrangean function as : \\ [ \\mathcal { L } ( x , y , z \\lambda ) = x+y+z+\\lambda\\left ( 1 - x y z \\right ) .\\ ] First order conditions imply : \\ [ \\left\\ { \\begin { array } { l } { 1- \\lambda y z=0 } \\\\ { 1- \\lambda x z=0 } \\\\ { 1- \\lambda x y=0 } \\\\ { 1- x y z =0 } \\end { array } \\right . \\ ] The only solution of the system is given by : \\ [ ( x^ * , y^ * , z^ * ) = ( 1 , 1 , 1 ) \\quad \\text { with } \\quad \\lambda^ * = 1 . \\ ] \\item We can prove that the point is not the global maximizer , by showing that the objective function is unbounded from above . For this purpose take $ z = 1 $ and $ y = 1/x $ . Then we have that the constraint is satisfied , and : \\ [ \\lim _ { x \\rightarrow+\\infty } f ( x , 1/x,1 ) = \\lim _ { x \\rightarrow+\\infty } x + \\frac { 1 } { x } = + \\infty . \\ ] \\end { enumerate } \\color { black } \\section * { Exercise 3 \\textcolor { red } { [ Inequality Constrained Optimization ] } } A consumer has the following utility function : \\ [ u ( x_1 , x_2 ) =x_1^ { 1/2 } +x_1^ { 1/2 } x_2^ { 1/3 } \\ ] Find the consumption bundle that maximizes her utility , subject to : \\ [ x_1\\geq0\\ ] \\ [ x_2\\geq0\\ ] \\ [ p_1x_1+p_2x_2\\leq I\\ ] With \\ ( P_1=2 , p_2=2 , I=8.\\ ) \\begin { enumerate } [ label = ( \\alph * ) ] \\item Use economic intuition to show that the problem is equivalent to an equality constraint problem , with non negative variables . Then write down first order necessary condition for a solution . \\item Check if the points ( 4,0 ) , ( 0,4 ) , ( 3,1 ) satisfy the FOC . \\item The previous points are the only ones satisfying the first order conditions . By using"
recap_problems,"This text comes from the document recap_problems. is not the global maximizer , by showing that the objective function is unbounded from above . For this purpose take $ z = 1 $ and $ y = 1/x $ . Then we have that the constraint is satisfied , and : \\ [ \\lim _ { x \\rightarrow+\\infty } f ( x , 1/x,1 ) = \\lim _ { x \\rightarrow+\\infty } x + \\frac { 1 } { x } = + \\infty . \\ ] \\end { enumerate } \\color { black } \\section * { Exercise 3 \\textcolor { red } { [ Inequality Constrained Optimization ] } } A consumer has the following utility function : \\ [ u ( x_1 , x_2 ) =x_1^ { 1/2 } +x_1^ { 1/2 } x_2^ { 1/3 } \\ ] Find the consumption bundle that maximizes her utility , subject to : \\ [ x_1\\geq0\\ ] \\ [ x_2\\geq0\\ ] \\ [ p_1x_1+p_2x_2\\leq I\\ ] With \\ ( P_1=2 , p_2=2 , I=8.\\ ) \\begin { enumerate } [ label = ( \\alph * ) ] \\item Use economic intuition to show that the problem is equivalent to an equality constraint problem , with non negative variables . Then write down first order necessary condition for a solution . \\item Check if the points ( 4,0 ) , ( 0,4 ) , ( 3,1 ) satisfy the FOC . \\item The previous points are the only ones satisfying the first order conditions . By using this information argue if any of them is the global maximizer . \\end { enumerate } \\subsection * { Solution } \\color { blue } \\begin { enumerate } [ label = ( \\alph * ) ] \\item The utility function is strictly increasing in both goods . Therefore the budget constrain must be met with equality , otherwise the consumer may increase their utility function by purchasing slightly more of one good . Therefore we can rewrite the problem as : \\ [ \\max_ { x_1 , x_2 } u ( x_1 , x_2 ) =x_1^ { 1/2 } +x_1^ { 1/2 } x_2^ { 1/3 } \\ ] s.t \\ [ x_1\\geq0\\ ] \\ [ x_2\\geq0\\ ] \\ [ x_1+x_2 = 4\\ ] This is an equality constrained optimization problem with non negative variables . We can write the Lagrangean with only one multiplier as : \\ [ \\mathcal { L } ( x_1 , x_2 \\lambda ) = x_1^ { 1/2 } +x_1^ { 1/2 } x_2^ { 1/3 } + \\lambda\\left ( 4 - x_1 -x_2 \\right ) .\\ ] First order conditions are then given by the following system : \\ [ \\left\\ { \\begin { array } { l } { \\frac { 1 } { 2 } x_1^ { -1/2 } + \\frac { 1 } { 2 } x_1^ { -1/2 } x_2^ { 1/3 } - \\lambda \\leq 0 } \\\\ { \\frac { 1 } { 3 } x_1^ {"
recap_problems,"This text comes from the document recap_problems. this information argue if any of them is the global maximizer . \\end { enumerate } \\subsection * { Solution } \\color { blue } \\begin { enumerate } [ label = ( \\alph * ) ] \\item The utility function is strictly increasing in both goods . Therefore the budget constrain must be met with equality , otherwise the consumer may increase their utility function by purchasing slightly more of one good . Therefore we can rewrite the problem as : \\ [ \\max_ { x_1 , x_2 } u ( x_1 , x_2 ) =x_1^ { 1/2 } +x_1^ { 1/2 } x_2^ { 1/3 } \\ ] s.t \\ [ x_1\\geq0\\ ] \\ [ x_2\\geq0\\ ] \\ [ x_1+x_2 = 4\\ ] This is an equality constrained optimization problem with non negative variables . We can write the Lagrangean with only one multiplier as : \\ [ \\mathcal { L } ( x_1 , x_2 \\lambda ) = x_1^ { 1/2 } +x_1^ { 1/2 } x_2^ { 1/3 } + \\lambda\\left ( 4 - x_1 -x_2 \\right ) .\\ ] First order conditions are then given by the following system : \\ [ \\left\\ { \\begin { array } { l } { \\frac { 1 } { 2 } x_1^ { -1/2 } + \\frac { 1 } { 2 } x_1^ { -1/2 } x_2^ { 1/3 } - \\lambda \\leq 0 } \\\\ { \\frac { 1 } { 3 } x_1^ { 1/2 } x_2^ { -2/3 } - \\lambda \\leq 0 } \\\\ { 4 - x_1 - x_2 = 0 } \\\\ { x_1 \\geq 0 } \\\\ { x_2 \\geq 0 } \\\\ { \\left [ \\frac { 1 } { 2 } x_1^ { -1/2 } + \\frac { 1 } { 2 } x_1^ { -1/2 } x_2^ { 1/3 } - \\lambda \\right ] x_1 = 0 } \\\\ { \\left [ \\frac { 1 } { 3 } x_1^ { 1/2 } x_2^ { -2/3 } - \\lambda \\right ] x_2 = 0 } \\end { array } \\right . \\ ] \\item By plugging in the values , we see that they all satify the first order conditions , with multipliers : \\ [ \\lambda_1 = 1/4 , \\quad \\lambda_2 = 0 , \\quad \\lambda_3 = \\frac { \\sqrt { 3 } } { 3 } \\ ] \\item Since the admissible region of the problem is compact and the utility function is continuous on it , the problem must admit a solution by Weierstrass theorem . Therefore the global maximizer must be among the points satysfing the first order condition . We can then just compare the utiltiy in the points we have : \\ [ u ( 4,0 ) = 2 , \\quad u ( 0,4 ) = 0 , \\quad u ( 3,1 ) = 2 \\sqrt { 3 } .\\ ] Comparing the values we conclude that the optimal consumption"
recap_problems,"This text comes from the document recap_problems. 1/2 } x_2^ { -2/3 } - \\lambda \\leq 0 } \\\\ { 4 - x_1 - x_2 = 0 } \\\\ { x_1 \\geq 0 } \\\\ { x_2 \\geq 0 } \\\\ { \\left [ \\frac { 1 } { 2 } x_1^ { -1/2 } + \\frac { 1 } { 2 } x_1^ { -1/2 } x_2^ { 1/3 } - \\lambda \\right ] x_1 = 0 } \\\\ { \\left [ \\frac { 1 } { 3 } x_1^ { 1/2 } x_2^ { -2/3 } - \\lambda \\right ] x_2 = 0 } \\end { array } \\right . \\ ] \\item By plugging in the values , we see that they all satify the first order conditions , with multipliers : \\ [ \\lambda_1 = 1/4 , \\quad \\lambda_2 = 0 , \\quad \\lambda_3 = \\frac { \\sqrt { 3 } } { 3 } \\ ] \\item Since the admissible region of the problem is compact and the utility function is continuous on it , the problem must admit a solution by Weierstrass theorem . Therefore the global maximizer must be among the points satysfing the first order condition . We can then just compare the utiltiy in the points we have : \\ [ u ( 4,0 ) = 2 , \\quad u ( 0,4 ) = 0 , \\quad u ( 3,1 ) = 2 \\sqrt { 3 } .\\ ] Comparing the values we conclude that the optimal consumption bundle is $ ( x^ * _1 , x^ * _2 ) = ( 3,1 ) . $ \\end { enumerate } \\color { black } \\section * { Exercise 4 \\textcolor { red } { [ Norms ] } } Say if the following function , is a norm on $ \\mathbb { R } ^3 $ . \\ [ \\max\\left\\ { \\sqrt { x_1^2+x_2^2 } , |x_3|\\right\\ } \\ ] \\subsection * { Solution } \\color { blue } First of all notice that $ \\sqrt { x_1^2+x_2^2 } $ is the euclidean norm on $ \\mathbb { R } ^2 $ and $ |x| $ is the Euclidean norm on $ \\mathbb { R } $ . Both of them satisfy all properties of a norm . Then we start by checking positivity . $ ||x|| \\geq 0 $ follows from $ \\sqrt { x_1^2+x_2^2 } \\geq 0 $ and $ |x_3| $ . The property is satisfied since we also have : \\ [ ||0|| = \\max\\left\\ { 0,0\\right\\ } = 0 , \\ ] \\ [ ||x|| = 0 \\implies \\max\\left\\ { \\sqrt { x_1^2+x_2^2 } , |x_3|\\right\\ } = 0 \\implies x_1 , x_2 , x_3 = 0.\\ ] Symmetry is aslo satisfied . \\ [ ||\\alpha x|| = \\max\\left\\ { \\sqrt { ( \\alpha x_1 ) ^2+ ( \\alpha x_2 ) ^2 } , |\\alpha x_3|\\right\\ } = \\max\\left\\ { \\sqrt { \\alpha^2 x_1^2+\\alpha^2 x_2^2 } , |\\alpha| |x_3|\\right\\ } = \\ ]"
recap_problems,"This text comes from the document recap_problems. bundle is $ ( x^ * _1 , x^ * _2 ) = ( 3,1 ) . $ \\end { enumerate } \\color { black } \\section * { Exercise 4 \\textcolor { red } { [ Norms ] } } Say if the following function , is a norm on $ \\mathbb { R } ^3 $ . \\ [ \\max\\left\\ { \\sqrt { x_1^2+x_2^2 } , |x_3|\\right\\ } \\ ] \\subsection * { Solution } \\color { blue } First of all notice that $ \\sqrt { x_1^2+x_2^2 } $ is the euclidean norm on $ \\mathbb { R } ^2 $ and $ |x| $ is the Euclidean norm on $ \\mathbb { R } $ . Both of them satisfy all properties of a norm . Then we start by checking positivity . $ ||x|| \\geq 0 $ follows from $ \\sqrt { x_1^2+x_2^2 } \\geq 0 $ and $ |x_3| $ . The property is satisfied since we also have : \\ [ ||0|| = \\max\\left\\ { 0,0\\right\\ } = 0 , \\ ] \\ [ ||x|| = 0 \\implies \\max\\left\\ { \\sqrt { x_1^2+x_2^2 } , |x_3|\\right\\ } = 0 \\implies x_1 , x_2 , x_3 = 0.\\ ] Symmetry is aslo satisfied . \\ [ ||\\alpha x|| = \\max\\left\\ { \\sqrt { ( \\alpha x_1 ) ^2+ ( \\alpha x_2 ) ^2 } , |\\alpha x_3|\\right\\ } = \\max\\left\\ { \\sqrt { \\alpha^2 x_1^2+\\alpha^2 x_2^2 } , |\\alpha| |x_3|\\right\\ } = \\ ] \\ [ = \\max\\left\\ { |\\alpha| \\sqrt { x_1^2+ x_2^2 } , |\\alpha| |x_3|\\right\\ } = |\\alpha| ||x|| . \\ ] Finally we prove that triangle inequality is satisfied . \\ [ ||x+y|| = \\max\\left\\ { \\sqrt { ( x_1 + y_1 ) ^2+ ( x_2 + y_2 ) ^2 } , |x_3 + y_3|\\right\\ } \\leq \\max\\left\\ { \\sqrt { x_1^2+ x_2^2 } + \\sqrt { y_1^2+ y_2^2 } , |x_3| + |y_3|\\right\\ } \\leq \\ ] \\ [ \\leq \\max\\left\\ { \\sqrt { x_1^2+x_2^2 } , |x_3|\\right\\ } + \\max\\left\\ { \\sqrt { y_1^2+y_2^2 } , |y_3|\\right\\ } = ||x|| + ||y|| . \\ ] \\color { black } \\section * { Exercise 5 \\textcolor { red } { [ Fixed Points ] } } Define $ f : ( 0,1/4 ) \\rightarrow ( 0,1/4 ) $ by $ f ( x ) = x^2 $ . Show that $ f $ is a contraction that has no fixed point . Why does Banach Theorem not apply ? \\subsection * { Solution } \\color { blue } We want to prove that $ d ( f ( x ) , f ( y ) ) \\leq d ( x , y ) . $ That is : \\ [ |x^2 - y^2| = | ( x+y ) ( x-y ) | \\leq |x+y||x-y| < \\frac { 1 } { 2 } |x-y| . \\ ] Where the last inequalities follow from $ |x+y| \\geq 0 $ and $"
recap_problems,"This text comes from the document recap_problems. \\ [ = \\max\\left\\ { |\\alpha| \\sqrt { x_1^2+ x_2^2 } , |\\alpha| |x_3|\\right\\ } = |\\alpha| ||x|| . \\ ] Finally we prove that triangle inequality is satisfied . \\ [ ||x+y|| = \\max\\left\\ { \\sqrt { ( x_1 + y_1 ) ^2+ ( x_2 + y_2 ) ^2 } , |x_3 + y_3|\\right\\ } \\leq \\max\\left\\ { \\sqrt { x_1^2+ x_2^2 } + \\sqrt { y_1^2+ y_2^2 } , |x_3| + |y_3|\\right\\ } \\leq \\ ] \\ [ \\leq \\max\\left\\ { \\sqrt { x_1^2+x_2^2 } , |x_3|\\right\\ } + \\max\\left\\ { \\sqrt { y_1^2+y_2^2 } , |y_3|\\right\\ } = ||x|| + ||y|| . \\ ] \\color { black } \\section * { Exercise 5 \\textcolor { red } { [ Fixed Points ] } } Define $ f : ( 0,1/4 ) \\rightarrow ( 0,1/4 ) $ by $ f ( x ) = x^2 $ . Show that $ f $ is a contraction that has no fixed point . Why does Banach Theorem not apply ? \\subsection * { Solution } \\color { blue } We want to prove that $ d ( f ( x ) , f ( y ) ) \\leq d ( x , y ) . $ That is : \\ [ |x^2 - y^2| = | ( x+y ) ( x-y ) | \\leq |x+y||x-y| < \\frac { 1 } { 2 } |x-y| . \\ ] Where the last inequalities follow from $ |x+y| \\geq 0 $ and $ |x+y| < \\frac { 1 } { 2 } $ , since $ x , y \\in ( 0,1/4 ) $ . However Banach theorem does not apply because the space $ ( 0,1/4 ) $ with the euclidean metric is not complete . To show this consider the sequence $ x_n = \\frac { 1 } { n } $ , which is Cauchy but not convergent , since \\ [ \\lim_ { n \\to \\infty } \\frac { 1 } { n } = 0 \\notin ( 0,1/4 ) . \\ ] \\color { black } \\end { document }"
recap_problems,"This text comes from the document recap_problems. |x+y| < \\frac { 1 } { 2 } $ , since $ x , y \\in ( 0,1/4 ) $ . However Banach theorem does not apply because the space $ ( 0,1/4 ) $ with the euclidean metric is not complete . To show this consider the sequence $ x_n = \\frac { 1 } { n } $ , which is Cauchy but not convergent , since \\ [ \\lim_ { n \\to \\infty } \\frac { 1 } { n } = 0 \\notin ( 0,1/4 ) . \\ ] \\color { black } \\end { document }"
