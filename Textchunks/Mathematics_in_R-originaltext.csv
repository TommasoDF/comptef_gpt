Title,Text
Mathematics_in_R,"This text comes from the document Mathematics_in_R. 2 . My Big Fat Greek1 Calculator Functions , operators , and constants introduced in this Chapter : + , - , * , / , ^ , % * % , abs ( ) , as.matrix ( ) , choose ( ) , cos ( ) , cumprod ( ) , cumsum ( ) , det ( ) , diff ( ) , dim ( ) , eigen ( ) , exp ( ) , factorial ( ) , gamma ( ) , length ( ) , pi , prod ( ) , sin ( ) , solve ( ) , sort ( ) , sqrt ( ) , sum ( ) , t ( ) , tan ( ) . 2.1 Basic Math One of the simplest ( but very useful ) ways to use R is as a powerful number cruncher . By that I mean using R to perform standard mathematical calculations . The R language includes the usual arithmetic operations : + , - , * , / , ^ . Some examples : > 2+3 [ 1 ] 5 > 3/2 [ 1 ] 1.5 > 2^3 # this also can be written as 2 * * 3 [ 1 ] 8 > 4^2-3 * 2 # this is simply 16 - 6 [ 1 ] 10 > ( 56-14 ) /6 – 4 * 7 * 10/ ( 5^2-5 ) # this is more complicated [ 1 ] -7 Other standard functions that are found on most calculators are available in R : Name Operation sqrt ( ) square root abs ( ) absolute value sin ( ) , cos ( ) , tan ( ) trig functions ( radians ) – type ? Trig for others pi the number  = 3.1415926 .. exp ( ) , log ( ) exponential and logarithm gamma ( ) Euler ’ s gamma function factorial ( ) factorial function choose ( ) combination > sqrt ( 2 ) [ 1 ] 1.414214 > abs ( 2-4 ) [ 1 ] 2 > cos ( 4 * pi ) [ 1 ] 1 > log ( 0 ) # not defined [ 1 ] -Inf > factorial ( 6 ) # 6 ! [ 1 ] 720 > choose ( 52,5 ) # this is 52 ! / ( 47 ! * 5 ! ) [ 1 ] 2598960 1 Ahem . The Greek letters  and  are used to denote sums and products , respectively . Signomi . 9 2.2 Vector Arithmetic Vectors can be manipulated in a similar manner to scalars by using the same functions introduced in the last section . ( However , one must be careful when adding or subtracting vectors of different lengths or some unexpected results may occur . ) Some examples of such operations are : > x < - c ( 1,2,3,4 ) > y < - c ( 5,6,7,8 ) > x * y ["
Mathematics_in_R,"This text comes from the document Mathematics_in_R. are found on most calculators are available in R : Name Operation sqrt ( ) square root abs ( ) absolute value sin ( ) , cos ( ) , tan ( ) trig functions ( radians ) – type ? Trig for others pi the number  = 3.1415926 .. exp ( ) , log ( ) exponential and logarithm gamma ( ) Euler ’ s gamma function factorial ( ) factorial function choose ( ) combination > sqrt ( 2 ) [ 1 ] 1.414214 > abs ( 2-4 ) [ 1 ] 2 > cos ( 4 * pi ) [ 1 ] 1 > log ( 0 ) # not defined [ 1 ] -Inf > factorial ( 6 ) # 6 ! [ 1 ] 720 > choose ( 52,5 ) # this is 52 ! / ( 47 ! * 5 ! ) [ 1 ] 2598960 1 Ahem . The Greek letters  and  are used to denote sums and products , respectively . Signomi . 9 2.2 Vector Arithmetic Vectors can be manipulated in a similar manner to scalars by using the same functions introduced in the last section . ( However , one must be careful when adding or subtracting vectors of different lengths or some unexpected results may occur . ) Some examples of such operations are : > x < - c ( 1,2,3,4 ) > y < - c ( 5,6,7,8 ) > x * y [ 1 ] 5 12 21 32 > y/x [ 1 ] 5.000000 3.000000 2.333333 2.000000 > y-x [ 1 ] 4 4 4 4 > x^y [ 1 ] 1 64 2187 65536 > cos ( x * pi ) + cos ( y * pi ) [ 1 ] -2 2 -2 2 > Other useful functions that pertain to vectors include : Name Operation length ( ) returns the number of entries in a vector sum ( ) calculates the arithmetic sum of all values in the vector prod ( ) calculates the product of all values in the vector cumsum ( ) , cumprod ( ) cumulative sums and products sort ( ) sort a vector diff ( ) computes suitably lagged ( default is 1 ) differences Some examples using these functions : > s < - c ( 1,1,3,4,7,11 ) > length ( s ) [ 1 ] 6 > sum ( s ) # 1+1+3+4+7+11 [ 1 ] 27 > prod ( s ) # 1 * 1 * 3 * 4 * 7 * 11 [ 1 ] 924 > cumsum ( s ) [ 1 ] 1 2 5 9 16 27 > diff ( s ) # 1-1 , 3-1 , 4-3 , 7-4 , 11-7 [ 1 ] 0 2 1 3 4 > diff ( s , lag = 2 ) # 3-1 , 4-1 , 7-3 , 11-4 [ 1 ] 2 3 4 7 10 2.3 Matrix"
Mathematics_in_R,"This text comes from the document Mathematics_in_R. 1 ] 5 12 21 32 > y/x [ 1 ] 5.000000 3.000000 2.333333 2.000000 > y-x [ 1 ] 4 4 4 4 > x^y [ 1 ] 1 64 2187 65536 > cos ( x * pi ) + cos ( y * pi ) [ 1 ] -2 2 -2 2 > Other useful functions that pertain to vectors include : Name Operation length ( ) returns the number of entries in a vector sum ( ) calculates the arithmetic sum of all values in the vector prod ( ) calculates the product of all values in the vector cumsum ( ) , cumprod ( ) cumulative sums and products sort ( ) sort a vector diff ( ) computes suitably lagged ( default is 1 ) differences Some examples using these functions : > s < - c ( 1,1,3,4,7,11 ) > length ( s ) [ 1 ] 6 > sum ( s ) # 1+1+3+4+7+11 [ 1 ] 27 > prod ( s ) # 1 * 1 * 3 * 4 * 7 * 11 [ 1 ] 924 > cumsum ( s ) [ 1 ] 1 2 5 9 16 27 > diff ( s ) # 1-1 , 3-1 , 4-3 , 7-4 , 11-7 [ 1 ] 0 2 1 3 4 > diff ( s , lag = 2 ) # 3-1 , 4-1 , 7-3 , 11-4 [ 1 ] 2 3 4 7 10 2.3 Matrix Operations Among the many powerful features of R is its ability to perform matrix operations . As we > Matrix operations ( multiplication , transpose , etc . ) can easily be performed in R using a few simple functions like : Name Operation dim ( ) dimension of the matrix ( number of rows and columns ) as.matrix ( ) used to coerce an argument into a matrix object % * % matrix multiplication t ( ) matrix transpose det ( ) determinant of a square matrix solve ( ) matrix inverse ; also solves a system of linear equations eigen ( ) computes eigenvalues and eigenvectors Using the matrices A , B , and C just created , we can have some linear algebra fun using the above functions : 11 > t ( C ) # this is the same as A ! ! [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B % * % C [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ ,5 ] [ 1 , ] 13 16 19 22 25 [ 2 , ] 27 34 41 48 55 [ 3 , ] 41 52 63 74 85 [ 4 , ] 55 70 85 100 115 [ 5 , ] 69 88 107 126 145 >"
Mathematics_in_R,"This text comes from the document Mathematics_in_R. Operations Among the many powerful features of R is its ability to perform matrix operations . As we > Matrix operations ( multiplication , transpose , etc . ) can easily be performed in R using a few simple functions like : Name Operation dim ( ) dimension of the matrix ( number of rows and columns ) as.matrix ( ) used to coerce an argument into a matrix object % * % matrix multiplication t ( ) matrix transpose det ( ) determinant of a square matrix solve ( ) matrix inverse ; also solves a system of linear equations eigen ( ) computes eigenvalues and eigenvectors Using the matrices A , B , and C just created , we can have some linear algebra fun using the above functions : 11 > t ( C ) # this is the same as A ! ! [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B % * % C [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ ,5 ] [ 1 , ] 13 16 19 22 25 [ 2 , ] 27 34 41 48 55 [ 3 , ] 41 52 63 74 85 [ 4 , ] 55 70 85 100 115 [ 5 , ] 69 88 107 126 145 > D < - C % * % B > D [ ,1 ] [ ,2 ] [ 1 , ] 95 110 [ 2 , ] 220 260 > det ( D ) [ 1 ] 500 > solve ( D ) # this is D-1 [ ,1 ] [ ,2 ] [ 1 , ] 0.52 -0.22 [ 2 , ] -0.44 0.19 > 2.4 Exercises Use R to compute the following : 1 . 23 32 . 2. ee . 3 . ( 2.3 ) 8 + ln ( 7.5 ) – cos ( / 2 ) . 4 . Let A =           4 7 2 5 2 1 6 4 1 2 3 2 , B =               1 5 1 2 2 4 7 3 0 1 3 4 1 3 5 2 . Find AB-1 and BAT . 5 . The dot product of [ 2 , 5 , 6 , 7 ] and [ -1 , 3 , -1 , -1 ] ."
Mathematics_in_R,"This text comes from the document Mathematics_in_R. D < - C % * % B > D [ ,1 ] [ ,2 ] [ 1 , ] 95 110 [ 2 , ] 220 260 > det ( D ) [ 1 ] 500 > solve ( D ) # this is D-1 [ ,1 ] [ ,2 ] [ 1 , ] 0.52 -0.22 [ 2 , ] -0.44 0.19 > 2.4 Exercises Use R to compute the following : 1 . 23 32 . 2. ee . 3 . ( 2.3 ) 8 + ln ( 7.5 ) – cos ( / 2 ) . 4 . Let A =           4 7 2 5 2 1 6 4 1 2 3 2 , B =               1 5 1 2 2 4 7 3 0 1 3 4 1 3 5 2 . Find AB-1 and BAT . 5 . The dot product of [ 2 , 5 , 6 , 7 ] and [ -1 , 3 , -1 , -1 ] ."
