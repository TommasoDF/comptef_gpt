Title,Text
R_Overwiev,"This text comes from the document R_Overwiev. 1 . Overview and History Functions and quantities introduced in this Chapter : apropos ( ) , c ( ) , FALSE or F , help ( ) , log ( ) , ls ( ) , matrix ( ) , q ( ) , rm ( ) , TRUE or T 1.1 What is R ? R is an integrated suite of software facilities for data manipulation , simulation , calculation and graphical display . It handles and analyzes data very effectively and it contains a suite of operators for calculations on arrays and matrices . In addition , it has the graphical capabilities for very sophisticated graphs and data displays . Finally , it is an elegant , object-oriented programming language . R is an independent , open-source , and free implementation of the S programming language . Today , the commercial product is called S-PLUS and it is distributed by the Insightful Corporation . The S language , which was written in the mid-1970s , was a product of Bell Labs ( of AT & T and now Lucent Technologies ) and was originally a program for the Unix operating system . R is available in Windows and Macintosh versions , as well as in various flavors of Unix and Linux . Although there are some minor differences between R and SPLUS ( mostly in the graphical user interface ) , they are essentially identical . The R project was started by Robert Gentleman and Ross Ihaka ( that ’ s where the name “ R ” is derived ) from the Statistics Department in the University of Auckland in 1995 . The software has quickly gained a widespread audience . It is currently maintained by the R Core development team – a hard-working , international group of volunteer developers . The R project web page is http : //www.r-project.org This is the main site for information on R. Here , you can find information on obtaining the software , get documentation , read FAQs , etc . For downloading the software directly , you can visit the Comprehensive R Archive Network ( CRAN ) in the U.S. at http : //cran.us.r-project.org/ New versions of the software are released periodically . 1.2 Starting and Quitting R The easiest way to use R is in an interactive manner via the command line . After the software is installed on a Windows or Macintosh machine , you simply double click the R icon ( in Unix/Linux , type R from the command prompt ) . When R is started , the program ’ s “ Gui ” ( graphical user interface ) window appears . Under the opening message in the R Console is the > ( “ greater than ” ) prompt . For the most part , statements in R are typed directly into the R Console window . 2 Once R has started , you should be greeted with a command line similar to R version"
R_Overwiev,"This text comes from the document R_Overwiev. ( that ’ s where the name “ R ” is derived ) from the Statistics Department in the University of Auckland in 1995 . The software has quickly gained a widespread audience . It is currently maintained by the R Core development team – a hard-working , international group of volunteer developers . The R project web page is http : //www.r-project.org This is the main site for information on R. Here , you can find information on obtaining the software , get documentation , read FAQs , etc . For downloading the software directly , you can visit the Comprehensive R Archive Network ( CRAN ) in the U.S. at http : //cran.us.r-project.org/ New versions of the software are released periodically . 1.2 Starting and Quitting R The easiest way to use R is in an interactive manner via the command line . After the software is installed on a Windows or Macintosh machine , you simply double click the R icon ( in Unix/Linux , type R from the command prompt ) . When R is started , the program ’ s “ Gui ” ( graphical user interface ) window appears . Under the opening message in the R Console is the > ( “ greater than ” ) prompt . For the most part , statements in R are typed directly into the R Console window . 2 Once R has started , you should be greeted with a command line similar to R version 2.9.1 ( 2009-06-26 ) Copyright ( C ) 2009 The R Foundation for Statistical Computing ISBN 3-900051-07-0 R is free software and comes with ABSOLUTELY NO WARRANTY . You are welcome to redistribute it under certain conditions . Type 'license ( ) ' or 'licence ( ) ' for distribution details . Natural language support but running in an English locale R is a collaborative project with many contributors . Type 'contributors ( ) ' for more information and 'citation ( ) ' on how to cite R or R packages in publications . Type 'demo ( ) ' for some demos , 'help ( ) ' for on-line help , or 'help.start ( ) ' for an HTML browser interface to help . Type ' q ( ) ' to quit R. > At the > prompt , you tell R what you want it to do . You give R a command and R does the work and gives the answer . If your command is too long to fit on a line or if you submit an incomplete command , a “ + ” is used for the continuation prompt . To quit R , type q ( ) or use the Exit option in the File menu . 1.3 A Simple Example : the c ( ) Function and the Assignment Operator A useful command in R for entering small data sets is the c ( ) function . This function combines terms together . For"
R_Overwiev,"This text comes from the document R_Overwiev. 2.9.1 ( 2009-06-26 ) Copyright ( C ) 2009 The R Foundation for Statistical Computing ISBN 3-900051-07-0 R is free software and comes with ABSOLUTELY NO WARRANTY . You are welcome to redistribute it under certain conditions . Type 'license ( ) ' or 'licence ( ) ' for distribution details . Natural language support but running in an English locale R is a collaborative project with many contributors . Type 'contributors ( ) ' for more information and 'citation ( ) ' on how to cite R or R packages in publications . Type 'demo ( ) ' for some demos , 'help ( ) ' for on-line help , or 'help.start ( ) ' for an HTML browser interface to help . Type ' q ( ) ' to quit R. > At the > prompt , you tell R what you want it to do . You give R a command and R does the work and gives the answer . If your command is too long to fit on a line or if you submit an incomplete command , a “ + ” is used for the continuation prompt . To quit R , type q ( ) or use the Exit option in the File menu . 1.3 A Simple Example : the c ( ) Function and the Assignment Operator A useful command in R for entering small data sets is the c ( ) function . This function combines terms together . For example , suppose the following represents eight tosses of a fair die : 2 5 1 6 5 5 4 1 To enter this into an R session , we type > dieroll < - c ( 2,5,1,6,5,5,4,1 ) > dieroll [ 1 ] 2 5 1 6 5 5 4 1 > Notice a few things :  We assigned the values to a variable called dieroll . R is case sensitive , so you could have another variable called DiEroLL and it would be distinct . The name of a variable can contain most combination of letters , numbers , and periods ( . ) . ( Obviously , a variable can ’ t be named with all numbers , though . ) 3  The assignment operator is “ < - ” ; to be specific , this is composed of a < ( “ less than ” ) and a – ( “ minus ” or “ dash ” ) typed together . It is usually read as “ gets ” – the variable dieroll gets the value c ( 2,5,1,6,5,5,4,1 ) . Alternatively , as of R version 1.4.0 , you can use “ = ” as the assignment operator .  The value of dieroll doesn ’ t automatically print out . But , it does when we type just the name on the input line as seen above .  The value of dieroll is prefaced with a [ 1 ] . This"
R_Overwiev,"This text comes from the document R_Overwiev. example , suppose the following represents eight tosses of a fair die : 2 5 1 6 5 5 4 1 To enter this into an R session , we type > dieroll < - c ( 2,5,1,6,5,5,4,1 ) > dieroll [ 1 ] 2 5 1 6 5 5 4 1 > Notice a few things :  We assigned the values to a variable called dieroll . R is case sensitive , so you could have another variable called DiEroLL and it would be distinct . The name of a variable can contain most combination of letters , numbers , and periods ( . ) . ( Obviously , a variable can ’ t be named with all numbers , though . ) 3  The assignment operator is “ < - ” ; to be specific , this is composed of a < ( “ less than ” ) and a – ( “ minus ” or “ dash ” ) typed together . It is usually read as “ gets ” – the variable dieroll gets the value c ( 2,5,1,6,5,5,4,1 ) . Alternatively , as of R version 1.4.0 , you can use “ = ” as the assignment operator .  The value of dieroll doesn ’ t automatically print out . But , it does when we type just the name on the input line as seen above .  The value of dieroll is prefaced with a [ 1 ] . This indicates that the value is a vector ( more on this later ) . When entering commands in R , you can save yourself a lot of typing when you learn to use the arrow keys effectively . Each command you submit is stored in the History and the up arrow (  ) will navigate backwards along this history and the down arrow (  ) forwards . The left (  ) and right arrow (  ) keys move backwards and forwards along the command line . These keys combined with the mouse for cutting/pasting can make it very easy to edit and execute previous commands . 1.4 The Workspace All variables or “ objects ” created in R are stored in what ’ s called the workspace . To see what variables are in the workspace , you can use the function ls ( ) to list them ( this function doesn ’ t need any argument between the parentheses ) . Currently , we only have : > ls ( ) [ 1 ] `` dieroll '' If we define a new variable – a simple function of the variable dieroll – it will be added to the workspace : > newdieroll < - dieroll/2 # divide every element by two > newdieroll [ 1 ] 1.0 2.5 0.5 3.0 2.5 2.5 2.0 0.5 > ls ( ) [ 1 ] `` dieroll '' `` newdieroll '' Notice a few more things :  The"
R_Overwiev,"This text comes from the document R_Overwiev. indicates that the value is a vector ( more on this later ) . When entering commands in R , you can save yourself a lot of typing when you learn to use the arrow keys effectively . Each command you submit is stored in the History and the up arrow (  ) will navigate backwards along this history and the down arrow (  ) forwards . The left (  ) and right arrow (  ) keys move backwards and forwards along the command line . These keys combined with the mouse for cutting/pasting can make it very easy to edit and execute previous commands . 1.4 The Workspace All variables or “ objects ” created in R are stored in what ’ s called the workspace . To see what variables are in the workspace , you can use the function ls ( ) to list them ( this function doesn ’ t need any argument between the parentheses ) . Currently , we only have : > ls ( ) [ 1 ] `` dieroll '' If we define a new variable – a simple function of the variable dieroll – it will be added to the workspace : > newdieroll < - dieroll/2 # divide every element by two > newdieroll [ 1 ] 1.0 2.5 0.5 3.0 2.5 2.5 2.0 0.5 > ls ( ) [ 1 ] `` dieroll '' `` newdieroll '' Notice a few more things :  The new variable newdieroll has been assigned the value of dieroll divided by 2 – more about algebraic expressions is given in the next session .  You can add a comment to a command line by beginning it with the # character . R ignores everything on an input line after a # . To remove objects from the workspace ( you ’ ll want to do this occasionally when your workspace gets too cluttered ) , use the rm ( ) function : > rm ( newdieroll ) # this was a silly variable anyway > ls ( ) [ 1 ] `` dieroll '' 4 In Windows , you can clear the entire workspace via the “ Remove all objects ” option under the “ Misc ” menu . However , this is dangerous – more likely than not you will want to keep some things and delete others . When exiting R , the software asks if you would like to save your workspace image . If you click yes , all objects ( both new ones created in the current session and others from earlier sessions ) will be available during your next session . If you click no , all new objects will be lost and the workspace will be restored to the last time the image was saved . Get in the habit of saving your work – it will probably help you in the future . 1.5 Getting Help There is text help"
R_Overwiev,"This text comes from the document R_Overwiev. new variable newdieroll has been assigned the value of dieroll divided by 2 – more about algebraic expressions is given in the next session .  You can add a comment to a command line by beginning it with the # character . R ignores everything on an input line after a # . To remove objects from the workspace ( you ’ ll want to do this occasionally when your workspace gets too cluttered ) , use the rm ( ) function : > rm ( newdieroll ) # this was a silly variable anyway > ls ( ) [ 1 ] `` dieroll '' 4 In Windows , you can clear the entire workspace via the “ Remove all objects ” option under the “ Misc ” menu . However , this is dangerous – more likely than not you will want to keep some things and delete others . When exiting R , the software asks if you would like to save your workspace image . If you click yes , all objects ( both new ones created in the current session and others from earlier sessions ) will be available during your next session . If you click no , all new objects will be lost and the workspace will be restored to the last time the image was saved . Get in the habit of saving your work – it will probably help you in the future . 1.5 Getting Help There is text help available from within R using the function help ( ) or the ? character typed before a command . If you have questions about any function in this manual , see the corresponding help file . For example , suppose you would like to learn more about the function log ( ) in R. The following two commands result in the same thing : > help ( log ) > ? log In a Windows or Macintosh system , a Help Window opens with the following : log package : base R Documentation Logarithms and Exponentials Description : ` log ' computes natural logarithms , ` log10 ' computes common ( i.e. , base 10 ) logarithms , and ` log2 ' computes binary ( i.e. , base 2 ) logarithms . The general form ` logb ( x , base ) ' computes logarithms with base ` base ' ( ` log10 ' and ` log2 ' are only special cases ) . . . . ( skipped material ) Usage : log ( x , base = exp ( 1 ) ) logb ( x , base = exp ( 1 ) ) log10 ( x ) log2 ( x ) . . . Arguments : x : a numeric or complex vector . base : positive number . The base with respect to which logarithms are computed . Defaults to e= ` exp ( 1 ) ' . Value : A vector of the same length as"
R_Overwiev,"This text comes from the document R_Overwiev. available from within R using the function help ( ) or the ? character typed before a command . If you have questions about any function in this manual , see the corresponding help file . For example , suppose you would like to learn more about the function log ( ) in R. The following two commands result in the same thing : > help ( log ) > ? log In a Windows or Macintosh system , a Help Window opens with the following : log package : base R Documentation Logarithms and Exponentials Description : ` log ' computes natural logarithms , ` log10 ' computes common ( i.e. , base 10 ) logarithms , and ` log2 ' computes binary ( i.e. , base 2 ) logarithms . The general form ` logb ( x , base ) ' computes logarithms with base ` base ' ( ` log10 ' and ` log2 ' are only special cases ) . . . . ( skipped material ) Usage : log ( x , base = exp ( 1 ) ) logb ( x , base = exp ( 1 ) ) log10 ( x ) log2 ( x ) . . . Arguments : x : a numeric or complex vector . base : positive number . The base with respect to which logarithms are computed . Defaults to e= ` exp ( 1 ) ' . Value : A vector of the same length as ` x ' containing the transformed values . ` log ( 0 ) ' gives ` -Inf ' ( when available ) . . . . 5 So , we see that the log ( ) function in R is the logarithm function from mathematics . This function takes two arguments : “ x ” is the variable or object that will be taken the logarithm of and “ base ” defines which logarithm is calculated . Note that base is defaulted to e = 2.718281828 .. , which is the natural logarithm . We also see that there are other associated functions , namely log10 ( ) and log2 ( ) for the calculation of base 10 and 2 ( respectively ) logarithms . Some examples : > log ( 100 ) [ 1 ] 4.60517 > log2 ( 16 ) # same as log ( 16 , base=2 ) or just log ( 16,2 ) [ 1 ] 4 > log ( 1000 , base=10 ) # same as log10 ( 1000 ) [ 1 ] 3 > Due to the object oriented nature of R , we can also use the log ( ) function to calculate the logarithm of numerical vectors and matrices : > log2 ( c ( 1,2,3,4 ) ) # log base 2 of the vector ( 1,2,3,4 ) [ 1 ] 0.000000 1.000000 1.584963 2.000000 > Help can also be accessed from the menu on the R Console . This includes both"
R_Overwiev,"This text comes from the document R_Overwiev. ` x ' containing the transformed values . ` log ( 0 ) ' gives ` -Inf ' ( when available ) . . . . 5 So , we see that the log ( ) function in R is the logarithm function from mathematics . This function takes two arguments : “ x ” is the variable or object that will be taken the logarithm of and “ base ” defines which logarithm is calculated . Note that base is defaulted to e = 2.718281828 .. , which is the natural logarithm . We also see that there are other associated functions , namely log10 ( ) and log2 ( ) for the calculation of base 10 and 2 ( respectively ) logarithms . Some examples : > log ( 100 ) [ 1 ] 4.60517 > log2 ( 16 ) # same as log ( 16 , base=2 ) or just log ( 16,2 ) [ 1 ] 4 > log ( 1000 , base=10 ) # same as log10 ( 1000 ) [ 1 ] 3 > Due to the object oriented nature of R , we can also use the log ( ) function to calculate the logarithm of numerical vectors and matrices : > log2 ( c ( 1,2,3,4 ) ) # log base 2 of the vector ( 1,2,3,4 ) [ 1 ] 0.000000 1.000000 1.584963 2.000000 > Help can also be accessed from the menu on the R Console . This includes both the text help and help that you can access via a web browser . You can also perform a keyword search with the function apropos ( ) . As an example , to find all functions in R that contain the string norm , type : > apropos ( `` norm '' ) [ 1 ] `` dlnorm '' `` dnorm '' `` plnorm '' `` pnorm '' `` qlnorm '' [ 6 ] `` qnorm '' `` qqnorm '' `` qqnorm.default '' `` rlnorm '' `` rnorm '' > Note that we put the keyword in double quotes , but single quotes ( `` ) will also work . 1.6 More on Functions in R We have already seen a few functions at this point , but R has an incredible number of functions that are built into the software , and you even have the ability to write your own ( see Chapter 8 ) . Most functions will return something , and functions usually require one or more input values . In order to understand how to generally use functions in R , let ’ s consider the function matrix ( ) . A call to the help file gives the following : Matrices Description : 'matrix ' creates a matrix from the given set of values . Usage : matrix ( data = NA , nrow = 1 , ncol = 1 , byrow = FALSE ) 6 Arguments : data : the data vector nrow"
R_Overwiev,"This text comes from the document R_Overwiev. the text help and help that you can access via a web browser . You can also perform a keyword search with the function apropos ( ) . As an example , to find all functions in R that contain the string norm , type : > apropos ( `` norm '' ) [ 1 ] `` dlnorm '' `` dnorm '' `` plnorm '' `` pnorm '' `` qlnorm '' [ 6 ] `` qnorm '' `` qqnorm '' `` qqnorm.default '' `` rlnorm '' `` rnorm '' > Note that we put the keyword in double quotes , but single quotes ( `` ) will also work . 1.6 More on Functions in R We have already seen a few functions at this point , but R has an incredible number of functions that are built into the software , and you even have the ability to write your own ( see Chapter 8 ) . Most functions will return something , and functions usually require one or more input values . In order to understand how to generally use functions in R , let ’ s consider the function matrix ( ) . A call to the help file gives the following : Matrices Description : 'matrix ' creates a matrix from the given set of values . Usage : matrix ( data = NA , nrow = 1 , ncol = 1 , byrow = FALSE ) 6 Arguments : data : the data vector nrow : the desired number of rows ncol : the desired number of columns byrow : logical . If ` FALSE ' the matrix is filled by columns , otherwise the matrix is filled by rows . ... So , we see that this is a function that takes vectors and turns them into matrix objects . There are 4 arguments for this function , and they specify the entries and the size of the matrix object to be created . The argument byrow is set to be either TRUE or FALSE ( or T or F – either are allowed for logicals ) to specify how the values are filled in the matrix . Often arguments for functions will have default values , and we see that all of the arguments in the matrix ( ) function do . So , the call > matrix ( ) will return a matrix that has one row , one column , with the single entry NA ( missing or “ not available ” ) . However , the following is more interesting : > a < - c ( 1,2,3,4,5,6,7,8 ) > A < - matrix ( a , nrow=2 , ncol=4 , byrow=FALSE ) # a is different from A > A [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ 1 , ] 1 3 5 7 [ 2 , ] 2 4 6 8 > Note that we could have left off the byrow=FALSE argument"
R_Overwiev,"This text comes from the document R_Overwiev. : the desired number of rows ncol : the desired number of columns byrow : logical . If ` FALSE ' the matrix is filled by columns , otherwise the matrix is filled by rows . ... So , we see that this is a function that takes vectors and turns them into matrix objects . There are 4 arguments for this function , and they specify the entries and the size of the matrix object to be created . The argument byrow is set to be either TRUE or FALSE ( or T or F – either are allowed for logicals ) to specify how the values are filled in the matrix . Often arguments for functions will have default values , and we see that all of the arguments in the matrix ( ) function do . So , the call > matrix ( ) will return a matrix that has one row , one column , with the single entry NA ( missing or “ not available ” ) . However , the following is more interesting : > a < - c ( 1,2,3,4,5,6,7,8 ) > A < - matrix ( a , nrow=2 , ncol=4 , byrow=FALSE ) # a is different from A > A [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ 1 , ] 1 3 5 7 [ 2 , ] 2 4 6 8 > Note that we could have left off the byrow=FALSE argument , since this is the default value . In addition , since there is a specified ordering to the arguments in the function , we also could have typed > A < - matrix ( a,2,4 ) to get the same result . For the most part , however , it is best to include the argument names in a function call ( especially when you aren ’ t using the default values ) so that you don ’ t confuse yourself . We will learn more about this function in the next chapter . 1.7 Printing and Saving Your Work You can print directly from the R Console by selecting “ Print… ” in the File menu , but this will capture everything ( including errors ) from your session . Alternatively , you can copy what you need and paste it into a word processor or text editor ( suggestion : use Courier font so that the formatting is identical to the R Console ) . In addition , you can save everything in the R Console by using the “ Save to File… ” command . 7 1.8 Other Sources of Reference It would be impossible to describe all of R in a document of manageable size . But , there are a number of tutorials , manuals , and books that can help with learning to use R. Happily , like the program itself , much of what you can find is free . Here are"
R_Overwiev,"This text comes from the document R_Overwiev. , since this is the default value . In addition , since there is a specified ordering to the arguments in the function , we also could have typed > A < - matrix ( a,2,4 ) to get the same result . For the most part , however , it is best to include the argument names in a function call ( especially when you aren ’ t using the default values ) so that you don ’ t confuse yourself . We will learn more about this function in the next chapter . 1.7 Printing and Saving Your Work You can print directly from the R Console by selecting “ Print… ” in the File menu , but this will capture everything ( including errors ) from your session . Alternatively , you can copy what you need and paste it into a word processor or text editor ( suggestion : use Courier font so that the formatting is identical to the R Console ) . In addition , you can save everything in the R Console by using the “ Save to File… ” command . 7 1.8 Other Sources of Reference It would be impossible to describe all of R in a document of manageable size . But , there are a number of tutorials , manuals , and books that can help with learning to use R. Happily , like the program itself , much of what you can find is free . Here are some examples of documentation that are available :  The R program : From the Help menu you can access the manuals that come with the software . These are written by the R core development team . Some are very lengthy and specific , but the manual “ An Introduction to R ” is a good source of useful information .  Free Documentation : The CRAN website has several user contributed documents in several languages . These include : R for Beginners by Emmanuel Paradis ( 76 pages ) . A good overview of the software with some nice descriptions of the graphical capabilities of R. The author assumes that the reader knows some statistical methods . R reference card by Tom Short ( 4 pages ) . This is a great desk companion when working with R.  Books : These you have to buy , but they are excellent ! Some examples : Introductory Statistics with R by Peter Dalgaard , Springer-Verlag ( 2002 ) . Peter is a member of the R Core team and this book is a fantastic reference that includes both elementary and some advanced statistical methods in R. Modern Applied Statistics with S , 4th Ed . by W.N . Venable and B.D . Ripley , Springer-Verlag ( 2002 ) . The authoritative guide to the S programming language for advanced statistical methods . 1.9 Exercises 1 . Use the help system to find information on the R functions mean and"
R_Overwiev,"This text comes from the document R_Overwiev. some examples of documentation that are available :  The R program : From the Help menu you can access the manuals that come with the software . These are written by the R core development team . Some are very lengthy and specific , but the manual “ An Introduction to R ” is a good source of useful information .  Free Documentation : The CRAN website has several user contributed documents in several languages . These include : R for Beginners by Emmanuel Paradis ( 76 pages ) . A good overview of the software with some nice descriptions of the graphical capabilities of R. The author assumes that the reader knows some statistical methods . R reference card by Tom Short ( 4 pages ) . This is a great desk companion when working with R.  Books : These you have to buy , but they are excellent ! Some examples : Introductory Statistics with R by Peter Dalgaard , Springer-Verlag ( 2002 ) . Peter is a member of the R Core team and this book is a fantastic reference that includes both elementary and some advanced statistical methods in R. Modern Applied Statistics with S , 4th Ed . by W.N . Venable and B.D . Ripley , Springer-Verlag ( 2002 ) . The authoritative guide to the S programming language for advanced statistical methods . 1.9 Exercises 1 . Use the help system to find information on the R functions mean and median . 2 . Get a list of all the functions in R that contains the string test . 3 . Create the vector info that contains your age , height ( in inches/cm ) , and phone number . 4 . Create the matrix Ident defined as a 3x3 identity matrix . 5 . Save your work from this session in the file 1stR.txt . 8 have seen in the last chapter , you can create matrix objects from vectors of numbers using the matrix ( ) command : > a < - c ( 1,2,3,4,5,6,7,8,9,10 ) > A < - matrix ( a , nrow = 5 , ncol = 2 ) # fill in by column > A [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B < - matrix ( a , nrow = 5 , ncol = 2 , byrow = TRUE ) # fill in by row > B [ ,1 ] [ ,2 ] [ 1 , ] 1 2 [ 2 , ] 3 4 [ 3 , ] 5 6 [ 4 , ] 7 8 [ 5 , ] 9 10 > C < - matrix ( a , nrow = 2 , ncol = 5 , byrow = TRUE ) > C [ ,1 ] [ ,2 ] [ ,3"
R_Overwiev,"This text comes from the document R_Overwiev. median . 2 . Get a list of all the functions in R that contains the string test . 3 . Create the vector info that contains your age , height ( in inches/cm ) , and phone number . 4 . Create the matrix Ident defined as a 3x3 identity matrix . 5 . Save your work from this session in the file 1stR.txt . 8 have seen in the last chapter , you can create matrix objects from vectors of numbers using the matrix ( ) command : > a < - c ( 1,2,3,4,5,6,7,8,9,10 ) > A < - matrix ( a , nrow = 5 , ncol = 2 ) # fill in by column > A [ ,1 ] [ ,2 ] [ 1 , ] 1 6 [ 2 , ] 2 7 [ 3 , ] 3 8 [ 4 , ] 4 9 [ 5 , ] 5 10 > B < - matrix ( a , nrow = 5 , ncol = 2 , byrow = TRUE ) # fill in by row > B [ ,1 ] [ ,2 ] [ 1 , ] 1 2 [ 2 , ] 3 4 [ 3 , ] 5 6 [ 4 , ] 7 8 [ 5 , ] 9 10 > C < - matrix ( a , nrow = 2 , ncol = 5 , byrow = TRUE ) > C [ ,1 ] [ ,2 ] [ ,3 ] [ ,4 ] [ ,5 ] [ 1 , ] 1 2 3 4 5 [ 2 , ] 6 7 8 9 10"
R_Overwiev,"This text comes from the document R_Overwiev. ] [ ,4 ] [ ,5 ] [ 1 , ] 1 2 3 4 5 [ 2 , ] 6 7 8 9 10"
